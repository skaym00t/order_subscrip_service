services:
  service-app:
    build:
      context: .
    image: service-backend
    container_name: service-site
    ports:
      - "8000:8000"
    volumes:
      - ./service:/service
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - service-network
    restart: unless-stopped

  telegram-bot:
    build:
      context: ./telegram_bot
    image: telegram-bot-service
    container_name: telegram-bot
    volumes:
      - ./telegram_bot:/app
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    command: python pytelegram.py
    depends_on:
      postgres:
        condition: service_healthy
      service-app:
        condition: service_started
    networks:
      - service-network
    restart: unless-stopped

  postgres:
    image: postgres:17.4-bookworm
    container_name: psgr-service
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - service-network
    restart: unless-stopped

networks:
  service-network:
    driver: bridge

volumes:
  postgres_data: